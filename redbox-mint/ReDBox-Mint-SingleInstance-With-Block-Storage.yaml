HeatTemplateFormatVersion: '2012-12-12'


Description: 'NeCTAR Template for creating a ReDBox-Mint software stack on ephemeral storage. This template currently works only with the CeNTOS 6.5 image.'


Parameters:

  KeyName:
    Label: Name of an existing key pair to enable SSH access to the instance.
    Type: String
    Description:
      Name of an existing key pair to enable SSH access to the instance.

  InstanceSize:
    Label: Size of the instance to be created.
    Type: String
    Description: Size of the instance to be created.
    Default: m1.small
    AllowedValues: [m1.small, m1.medium, m1.large, m1.xlarge, m1.xxlarge]

  ImageName:
    Label: Name of the image to use for the instance to be created (currently only has support for CentOS)
    Type: String
    Description: Name of the image to use for the instance to be created (currently only has support for CentOS)
    Default: NeCTAR CentOS 6.5 x86_64
    AllowedValues: [NeCTAR CentOS 6.5 x86_64]

  AvailabilityZone:
    Label: The NeCTAR zone in which the VM is to run (must have block storage)
    Type: String
    Description: The NeCTAR zone in which the VM is to run (must have block storage)
    Default: NCI
    AllowedValues: [melbourne, monash, sa, qld, NCI]

  VolumeSize:
    Label: Size in GB of the volume to be created.
    Type: Number
    Description: Size in GB of the volume to be created.
    Default: 10
    AllowedValues: [10,25,50,100,250]
    
  InstallType:
    Label: The ReDBox Installation type, defaults to ‘basic’. 
    Type: String
    Description: The ReDBox Installation type, defaults to ‘basic’. 
    Default: basic
    AllowedValues: [basic, harvester-complete]
  PostInstallCmd:
    Label: A comma delimited list of bash commands to run after ReDBox is installed.
    Type: String
    Description: A comma delimited list of bash commands to run after ReDBox is installed.
Mappings:

  InstanceId:
   'NeCTAR CentOS 6.5 x86_64': {ImageId: a5e74703-f343-415a-aa23-bd0f0aacfc9e}   

Resources:

  ReDBoxSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Enable ReDBox Ports"
      SecurityGroupIngress:
        -
          IpProtocol: "tcp"
          FromPort: "80"
          ToPort: "80"
          CidrIp: "0.0.0.0/0"
        -
          IpProtocol: "tcp"
          FromPort: "22"
          ToPort: "22"
          CidrIp: "0.0.0.0/0"
        -
          IpProtocol: "tcp"
          FromPort: "9000"
          ToPort: "9300"
          CidrIp: "0.0.0.0/0"

  CinderVolume:
    Type: OS::Cinder::Volume
    Properties:
      # small, but this is just a demo
      size:  { Ref: VolumeSize }
      availability_zone: { Ref: AvailabilityZone }

  ReDBoxInstance:
    Type: OS::Nova::Server
    Properties:
      availability_zone: { Ref: AvailabilityZone }
      image:
        Fn::FindInMap:
        - InstanceId
        - {Ref: ImageName}
        - ImageId
      flavor: { Ref: InstanceSize }
      key_name: { Ref: KeyName }
      security_groups: [{Ref: ReDBoxSecGroup}]
      user_data:
        Fn::Base64:
          Fn::Replace:
          - _InstallType: {Ref: InstallType} 
            _PostInstallCmd: {Ref: PostInstallCmd}
          - |
              #!/bin/bash -v
              echo "Starting to install software stack..."
              echo `date +"%D-%H:%M:%S"`
              # Wait for the volume to appear
              while [ ! -e /dev/vdc ]; do echo Waiting for volume to attach; sleep 1; done

              # partition the volume
              (echo c; echo u; echo n; echo p; echo 1; echo ; echo; echo w) | fdisk /dev/vdc

              #format it
              /sbin/mkfs -t ext3 /dev/vdc1

              # and mount it
              mkdir /mnt/ephemeral
              mkdir /mnt/data                          
              echo -e "/dev/vdb        /mnt/ephemeral    auto    defaults,auto,nofail,comment=heatconfig     0       2\n/dev/vdc1       /mnt/data         auto    defaults,auto,nofail,comment=heatconfig     0       2" >> /etc/fstab
              mount /mnt/ephemeral                        
              mount /mnt/data 
              rm -rf /opt && ln -s /mnt/data /opt
              
              # Install puppet and install ReDBox              
              mkdir -p /tmp/redbox
              wget -N -O /tmp/redbox/install.sh https://raw.githubusercontent.com/redbox-mint-contrib/puppet-redbox/master/scripts/install.sh 
              chmod +x /tmp/redbox/install.sh
              /tmp/redbox/install.sh _InstallType
              echo "ReDBox is installed."
              echo "Running Post Install Commands..."
              while IFS=',' read -ra POST_INSTALL_CMDS; do
                  for cmd in "${POST_INSTALL_CMDS[@]}"; do
                    echo "Running... $cmd"
                    /bin/bash -c "$cmd"
                  done
              done <<< "_PostInstallCmd"
              echo "Done Running Post Install Commands."
              echo "End of software stack installation"
              echo `date +"%D-%H:%M:%S"` 
              
  VolumeAttachment:
    Type: OS::Cinder::VolumeAttachment
    Properties:
      volume_id: { Ref: CinderVolume }
      instance_uuid: { Ref: ReDBoxInstance }
      # mount point has to be vdc or higher as vdb is transient storage allocated by NeCTAR
      mountpoint: "/dev/vdc"


Outputs:
  ReDBoxURL:
    Description: The URL of ReDBox
    Value:
      Fn::Join:
      - ''
      - - http://
        - Fn::GetAtt: [ReDBoxInstance, first_address]
        - /

  InstanceIP:
    Description: Public IP address of the newly created ReDBox instance.
    Value:
      Fn::GetAtt:
      - ReDBoxInstance
      - first_address